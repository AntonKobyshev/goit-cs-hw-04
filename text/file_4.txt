В даній публікації розглянуто та досліджено дві парадигми проектування – об’єктно-
орієнтовану та функційну. Автори публікації: А. І. Коваль, О. М. Яшина, Г. І. Радельчук, Ю. В.

Форкун.
У статті обговорюється поняття парадигми програмування, яка визначає стиль
програмування та спосіб мислення програміста. Підкреслюється, що парадигми програмування
відрізняються за своїми особливостями та стилем, включаючи модульність, об'єкти, переривання
та керування потоком. Зокрема, стаття фокусується на об'єктно-орієнтованому програмуванні
(ООП) та функційно-орієнтованому програмуванні (ФОП) як двох найпопулярніших парадигм
програмування та розглядає їхні основні особливості. Також вказується на можливість
використання обох парадигм в залежності від потреб розробки за допомогою

мультипарадигмових мов програмування. Основною метою статті є порівняльний аналіз об'єктно-
орієнтованого та функціонального програмування щодо їхньої ефективності та зручності

використання при проектуванні програмного забезпечення.
Об'єктно-орієнтоване програмування (ООП) розглядає програму як множину взаємодіючих
об'єктів, базуючись на чотирьох основних концепціях: інкапсуляція, успадкування, поліморфізм і
абстракція. Кожен об'єкт в ООП може отримувати повідомлення, обробляти дані і надсилати
повідомлення іншим об'єктам, що представляють речі або структури даних у програмі.
Функційне програмування (ФП) розглядає програму як обчислення математичних функцій,
уникаючи станів і змінних даних. У ФП важливою концепцією є референційна прозорість, що
гарантує передбачуваність функцій та легку модульність. Функції в ФП виконують одну чітко
визначену операцію та не залежать від стану програми.
Об'єктно-орієнтоване програмування дозволяє легко моделювати реальні об'єкти та
відносини між ними, але може бути менш ефективним і складнішим для розробки. Функційне
програмування, навпаки, спрощує модульність та передбачуваність програм, але не є загальним
методом та може бути менш інтуїтивним для програмістів.
Обидві парадигми мають свої переваги і недоліки, і вибір між ними залежить від
конкретних потреб проекту та особистого стилю програміста.
У ООП дані зберігаються у вигляді атрибутів об'єктів, і маніпулювання ними відбувається за
допомогою функцій об'єкта. Основний фокус в ООП на об'єктах і їх взаємодії.
У ФП дані перетворюються шляхом створення нових версій даних та маніпулювання ними,
і функції є основною концепцією. ФП наголошує на передбачуваності та референційній прозорості
функцій.
В ООП об'єкти представляють реальні сутності, які зберігають стани та мають власну
поведінку. У ФП об'єкти не так визначені, і фокус полягає в обробці даних.
ФП використовує ітеративну процедурну декомпозицію, починаючи з
висококонцептуальних моделей та докладаючи деталі на кожному етапі, тоді як ООП більше
спрямоване на моделювання реальних об'єктів та їх взаємодій.
Основні використання ООП в системах, що розвиваються та імітують бізнес-кейси, в той час
як ФП частіше використовується в обчислювальних додатках.
Отже, об'єктно-орієнтоване програмування і функційне програмування використовують
різні підходи до розробки програм. ООП розпочинається з визначення об'єктів і класів,
використовує імперативну модель, і надає "ЯК" виконувати завдання. У ФП декларативний підхід
визначає "ЩО" робити, і розробка починається з визначення сценаріїв і діаграм використання.

Обидві парадигми мають спільну мету - створення зрозумілих, гнучких та ефективних
програм. Вибір між ними залежить від конкретної задачі та розміру проекту. Гібридні та
мультипарадигмові підходи можуть бути корисними дляexample_1